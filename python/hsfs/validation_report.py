#
#   Copyright 2022 Logical Clocks AB
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import json
import great_expectations as ge

import humps
from hsfs import util
from hsfs.core import validation_report_engine
from python.hsfs.validation_result2 import ValidationResult


class ValidationReport:
    """Metadata object representing a validation report generated by Great Expectations in the Feature Store."""

    def __init__(
        self,
        id,
        success,
        results,
        meta,
        statistics,
        full_path=None,
        featurestore_id=None,
        featuregroup_id=None,
        href=None,
        expand=None,
        items=None,
        count=None,
        type=None,
        created=None,
    ):
        self._id = id
        self._success = success
        self._results = results
        self._meta = meta
        self._statistics = statistics
        self._full_path = full_path
        self._featurestore_id = featurestore_id
        self._featuregroup_id = featuregroup_id

    def save(self):
        """Persist the expectation metadata object to the feature store."""
        validation_report_engine.ValidationReportEngine(self._featurestore_id, self._featuregroup_id).save(self)

    @classmethod
    def from_response_json(cls, json_dict):
        json_decamelized = humps.decamelize(json_dict)
        if "count" in json_decamelized:
            if json_decamelized["count"] == 0:
                return []
            return [cls(**validation_report) for validation_report in json_decamelized["items"]]
        else:
            return cls(**json_decamelized)

    def json(self):
        return json.dumps(self, cls=util.FeatureStoreEncoder)

    def to_dict(self):
        return {
            "id": self._id,
            "success": self.success,
            "statistics": self._statistics,
            "results": self._results,
            "meta": self._meta,
        }

    @property
    def id(self):
        """Id of the validation report, set by backend."""
        return self._id

    @id.setter
    def id(self, id):
        self._id = id

    @property
    def success(self):
        """Overall success of the validation step"""
        return self._success

    @success.setter
    def success(self, success):
        self._success = success

    @property
    def results(self):
        """List of expectation results obtained after validation."""
        return self._results

    @results.setter
    def results(self, results):
        if len(results) == 0:
            self._results = []
        elif isinstance(results[0], ValidationResult):
            self._results = results
        elif isinstance(results[0], dict):
            self._results = [ValidationResult(**result) for result in results]
        elif isinstance(results[0], ge.core.expectation_validation_result.ExpectationValidationResult):
            self._results = [ValidationResult(**result.to_json_dict()) for result in results]

    @property
    def meta(self):
        """Meta field of the validation report to store additional informations."""
        return self._meta

    @meta.setter
    def meta(self, meta):
        self._meta = meta

    @property
    def statistics(self):
        """Statistics field of the validation report which store overall statistics about the validation result, e.g number of failing/successful expectations."""
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        self._statistics = statistics

    def __str__(self):
        return self.json()

    def __repr__(self):
        
        full_path_string = ""
        if self._full_path == None:
            full_path_string = f"download_path : {self._full_path}"

        return (
            f"ValidationReport(success: {self._success}, " 
            + f"{self._statistics}, {len(self._results)} results" 
            + f" , {self._meta}, {full_path_string})" 
        )