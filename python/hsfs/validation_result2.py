#
#   Copyright 2022 Logical Clocks AB
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import json
import statistics

import humps
from hsfs import util
from hsfs.core import validation_report_engine


class ValidationReport:
    """Metadata object representing a validation result generated by Great Expectations in the Feature Store."""

    def __init__(
        self,
        id,
        success,
        result,
        exception_info,
        expectation_config,
        meta,
        observed_value=None,
        expectation_id=None,
        validation_report_id=None,
        href=None,
        expand=None,
        items=None,
        count=None,
        type=None,
        created=None,
    ):
        self._id = id
        self._success = success
        self._result = result
        self._meta = meta
        self._exception_info = exception_info
        self._expectation_config = expectation_config
        self._observed_value = observed_value
        self._created = created
        self._expectation_id = expectation_id
        self._validation_report_id = validation_report_id

    def save(self):
        """Persist the expectation metadata object to the feature store."""
        validation_report_engine.ValidationReportEngine(self._featurestore_id, self._featuregroup_id).save(self)

    @classmethod
    def from_response_json(cls, json_dict):
        json_decamelized = humps.decamelize(json_dict)
        if "count" in json_decamelized:
            if json_decamelized["count"] == 0:
                return []
            return [cls(**validation_report) for validation_report in json_decamelized["items"]]
        else:
            return cls(**json_decamelized)

    def json(self):
        return json.dumps(self, cls=util.FeatureStoreEncoder)

    def to_dict(self):
        return {
            "id": self._id,
            "success": self.success,
            "exception_info": self._exception_info,
            "expectation_config": self._expectation_config,
            "result": self._result,
            "meta": self._meta,
        }

    @property
    def id(self):
        """Id of the validation report, set by backend."""
        return self._id

    @id.setter
    def id(self, id):
        self._id = id

    @property
    def success(self):
        """Overall success of the validation step"""
        return self._success

    @success.setter
    def success(self, success):
        self._success = success


    @property
    def result(self):
        """Result of the expectation after validation."""
        return self._result

    @result.setter
    def result(self, result):
        self._result = result

    @property
    def meta(self):
        """Meta field of the validation report to store additional informations."""
        return self._meta

    @meta.setter
    def meta(self, meta):
        self._meta = meta

    @property
    def exception_info(self):
        """Exception info which can be raised when running validation"""
        return self._exception_info

    @exception_info.setter
    def exception_info(self, exception_info):
        self._exception_info = exception_info

    @property
    def expectation_config(self):
        """Expectation configuration used when running validation"""
        return self._statistics

    @expectation_config.setter
    def expectation_config(self, expectation_config):
        self._expectation_config = expectation_config


    def json(self):
        return json.dumps(self, cls=util.FeatureStoreEncoder)

    def __str__(self):
        return self.json()

    def __repr__(self):
        result_string = ""
        if self._result == None and self._observed_values != None:
            result_string += f"observed_values : {self._observed_values}"
        elif self._observed_value != None and self._observed_values == None:
            result_string += f"result : {self._result}"
        
        return (
            f"ValidationResult(success: {self._success}," + result_string +
            f"{self._exception_info}, {self._expectation_config}, {self._meta})"
        )